/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gyan.parqueadero.interfaz;

import com.gyan.parqueadero.entidades.PagosMensuales;
import com.gyan.parqueadero.logicanegocio.PagosMensualesLogicaNegocio;
import com.gyan.parqueadero.utilidades.ReciboPdf;
import com.gyan.parqueadero.utilidades.Utilidades;
import static com.gyan.parqueadero.utilidades.Utilidades.mensajeAdvertencia;
import java.awt.Desktop;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author libardo
 */
public class GUIPagoMensual extends javax.swing.JInternalFrame {

    public static final String SELECCIONE = "--Seleccione--";
    public static final String SALIDA_TITULO = "Salida de Vehículo";
    public static final String ENTRADA_TITULO = "Entrada de Vehículo";

    /**
     * Array asociativo con los tipos de vehiculos: C=>Carro, M=>Moto
     */
    public static Hashtable<String, String> TIPOS_VEHICULO = new Hashtable<String, String>();
    /**
     * Una sóla instancia para acceder a la lógica del negocio
     */
    private PagosMensualesLogicaNegocio logica;

    /**
     * Constructor por defecto
     */
    public GUIPagoMensual() {
        initComponents();
        //setClosable(true);
        this.setMaximizable(true);
        this.setResizable(true);
        this.setSize(900, 700);

        llenarTiposVehiculos();
        logica = new PagosMensualesLogicaNegocio();
        llenarCboTiposVehiculo();
        inicializarTabla();
        estadoControlesInicial();
    }

    private void inicializarTabla() {
        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Placa", "Tipo", "Nombres", "FechaInicio", "FechaFin", "Valor"
                }
        ));
    }

    private void llenarCboTiposVehiculo() {

        DefaultComboBoxModel modeloCombo = new DefaultComboBoxModel();
        modeloCombo.addElement(SELECCIONE);
        modeloCombo.addElement("Carro");
        modeloCombo.addElement("Moto");
        cboTipoVehiculo.setModel(modeloCombo);
    }

    public void llenarTiposVehiculos() {
        TIPOS_VEHICULO.put("M", "Moto");
        TIPOS_VEHICULO.put("C", "Carro");
    }

    private void estadoControlesInicial() {
        //El descuento no lo voy a manejar en esta version
        lblDescuento.setVisible(false);
        txtDescuento.setVisible(false);
        btnDescuento.setVisible(false);

        btnGrabar.setEnabled(false);
        btnRecibo.setEnabled(false);

    }

    private void EstadoControlesEditar() {
        btnGrabar.setText("Editar");
        btnGrabar.setEnabled(true);
        btnRecibo.setEnabled(true);
    }

    private void EstadoControlesAgregar() {
        btnGrabar.setText("Agregar");
        btnGrabar.setEnabled(true);
        btnRecibo.setEnabled(true);
    }

    private void limpiarCajas() {
        //txtId.setText("");
        txtPlaca.setText("");
        cboTipoVehiculo.setSelectedIndex(0);
        txtFechaInicial.setDate(null);
        txtFechaFinal.setDate(null);
        txtDescuento.setText("");
        txtPropietario.setText("");
        txtValorPagar.setText("");
        txtEfectivo.setText("");
        txtCambio.setText("");
        txtObservacion.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlAgregar = new javax.swing.JPanel();
        pnlCentro = new javax.swing.JPanel();
        lblTipoVehiculo = new javax.swing.JLabel();
        cboTipoVehiculo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        lblFechaSalida = new javax.swing.JLabel();
        lblDescuento = new javax.swing.JLabel();
        txtDescuento = new javax.swing.JTextField();
        lblValorPagar = new javax.swing.JLabel();
        lblEfectivo = new javax.swing.JLabel();
        txtEfectivo = new javax.swing.JTextField();
        lblCambio = new javax.swing.JLabel();
        txtCambio = new javax.swing.JTextField();
        lblObservacion = new javax.swing.JLabel();
        btnDescuento = new javax.swing.JButton();
        btnEfectivo = new javax.swing.JButton();
        lblPropietario = new javax.swing.JLabel();
        txtPropietario = new javax.swing.JTextField();
        lblPlaca = new javax.swing.JLabel();
        txtObservacion = new javax.swing.JTextField();
        txtPlaca = new javax.swing.JFormattedTextField();
        txtValorPagar = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtFechaInicial = new com.toedter.calendar.JDateChooser();
        txtFechaFinal = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        pnlSur = new javax.swing.JPanel();
        btnGrabar = new javax.swing.JButton();
        btnRecibo = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        pnlConsultar = new javax.swing.JPanel();
        pnlBuscar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPlacaBuscar = new javax.swing.JFormattedTextField();
        btnBuscar = new javax.swing.JButton();
        btnMostrarTodos = new javax.swing.JButton();
        pnlTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pago Mensual");

        pnlAgregar.setLayout(new java.awt.BorderLayout());

        pnlCentro.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del vehículo"));
        pnlCentro.setLayout(new java.awt.GridBagLayout());

        lblTipoVehiculo.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblTipoVehiculo.setText("Tipo de Vehiculo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblTipoVehiculo, gridBagConstraints);

        cboTipoVehiculo.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        cboTipoVehiculo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboTipoVehiculo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTipoVehiculoItemStateChanged(evt);
            }
        });
        cboTipoVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipoVehiculoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(cboTipoVehiculo, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        jLabel2.setText("Fecha inicio");
        jLabel2.setToolTipText("dd-mm-aaaa hh:mm am-pm");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(jLabel2, gridBagConstraints);

        lblFechaSalida.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblFechaSalida.setText("Fecha fin:");
        lblFechaSalida.setToolTipText("dd-mm-aaaa hh:mm am-pm");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblFechaSalida, gridBagConstraints);

        lblDescuento.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblDescuento.setText("Descuento $:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblDescuento, gridBagConstraints);

        txtDescuento.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        txtDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescuentoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtDescuento, gridBagConstraints);

        lblValorPagar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblValorPagar.setText("Valor a Pagar $:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblValorPagar, gridBagConstraints);

        lblEfectivo.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblEfectivo.setText("Efectivo $ (opcional):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblEfectivo, gridBagConstraints);

        txtEfectivo.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        txtEfectivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEfectivoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtEfectivo, gridBagConstraints);

        lblCambio.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblCambio.setText("Cambio $ (opcional):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblCambio, gridBagConstraints);

        txtCambio.setEditable(false);
        txtCambio.setBackground(java.awt.Color.white);
        txtCambio.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtCambio, gridBagConstraints);

        lblObservacion.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblObservacion.setText("Observación (opcional):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblObservacion, gridBagConstraints);

        btnDescuento.setFont(new java.awt.Font("DejaVu Sans", 0, 8)); // NOI18N
        btnDescuento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/aplicar.png"))); // NOI18N
        btnDescuento.setToolTipText("Aplicar descuento");
        btnDescuento.setMaximumSize(new java.awt.Dimension(50, 50));
        btnDescuento.setPreferredSize(new java.awt.Dimension(30, 30));
        btnDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescuentoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCentro.add(btnDescuento, gridBagConstraints);

        btnEfectivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/aplicar.png"))); // NOI18N
        btnEfectivo.setToolTipText("Aplicar efectivo");
        btnEfectivo.setPreferredSize(new java.awt.Dimension(30, 30));
        btnEfectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEfectivoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCentro.add(btnEfectivo, gridBagConstraints);

        lblPropietario.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblPropietario.setText("Propietario (opcional):");
        lblPropietario.setToolTipText("Nombres y apellidos del conductor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        pnlCentro.add(lblPropietario, gridBagConstraints);

        txtPropietario.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtPropietario, gridBagConstraints);

        lblPlaca.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        lblPlaca.setText("Placa:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(lblPlaca, gridBagConstraints);

        txtObservacion.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        txtObservacion.setPreferredSize(new java.awt.Dimension(100, 36));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtObservacion, gridBagConstraints);

        try {
            txtPlaca.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("AAA-AAA")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtPlaca.setFont(new java.awt.Font("DejaVu Sans", 0, 30)); // NOI18N
        txtPlaca.setPreferredSize(new java.awt.Dimension(110, 60));
        txtPlaca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPlacaFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtPlaca, gridBagConstraints);

        txtValorPagar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        txtValorPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorPagarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtValorPagar, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        jLabel3.setText("Id:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCentro.add(jLabel3, gridBagConstraints);

        txtId.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        txtId.setPreferredSize(new java.awt.Dimension(50, 36));
        txtId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtId, gridBagConstraints);

        txtFechaInicial.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        txtFechaInicial.setPreferredSize(new java.awt.Dimension(150, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtFechaInicial, gridBagConstraints);

        txtFechaFinal.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlCentro.add(txtFechaFinal, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        pnlCentro.add(jLabel4, gridBagConstraints);

        pnlAgregar.add(pnlCentro, java.awt.BorderLayout.CENTER);

        pnlSur.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));

        btnGrabar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/grabar.png"))); // NOI18N
        btnGrabar.setText("Agregar");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });
        pnlSur.add(btnGrabar);

        btnRecibo.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnRecibo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/print.png"))); // NOI18N
        btnRecibo.setText("Imprimir Recibo");
        btnRecibo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReciboActionPerformed(evt);
            }
        });
        pnlSur.add(btnRecibo);

        btnCerrar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/cerrar.png"))); // NOI18N
        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        pnlSur.add(btnCerrar);

        pnlAgregar.add(pnlSur, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Agregar", pnlAgregar);

        pnlConsultar.setLayout(new java.awt.BorderLayout());

        pnlBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        jLabel1.setText("Placa:");
        pnlBuscar.add(jLabel1);

        try {
            txtPlacaBuscar.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("AAA-AAA")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtPlacaBuscar.setPreferredSize(new java.awt.Dimension(80, 50));
        txtPlacaBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPlacaBuscarKeyPressed(evt);
            }
        });
        pnlBuscar.add(txtPlacaBuscar);

        btnBuscar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/buscar.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setIconTextGap(2);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        pnlBuscar.add(btnBuscar);

        btnMostrarTodos.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnMostrarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/mostrarTodos.png"))); // NOI18N
        btnMostrarTodos.setText("Mostrar Todos");
        btnMostrarTodos.setIconTextGap(2);
        btnMostrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodosActionPerformed(evt);
            }
        });
        pnlBuscar.add(btnMostrarTodos);

        pnlConsultar.add(pnlBuscar, java.awt.BorderLayout.PAGE_START);

        pnlTabla.setLayout(new java.awt.BorderLayout());

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDatos);

        pnlTabla.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pnlConsultar.add(pnlTabla, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Consultar", pnlConsultar);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReciboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReciboActionPerformed
        //Utilidades.mensajeExito("Esta opción está en construcción...", "Atención");
        //Cargar Datos del archivo
        Properties prop = new Properties();
        InputStream is = null;

        try {
            is = new FileInputStream("./config.properties");
            prop.load(is);
        } catch (IOException e) {
            Utilidades.mensajeError("Error al cargar el archivo de configuración de variables\n" + e.getMessage(), "Atención");
            return;
        }
        //Tarifas de carro
        String nombreParqueadero = prop.getProperty("nombreParqueadero");
        String direccionParqueadero = prop.getProperty("direccionParqueadero");

        String valorPagar = "";
        if (txtValorPagar.isVisible()) {
            valorPagar = txtValorPagar.getText();
        }
        
        String fechaInicial = Utilidades.formatoFechaSinHora(txtFechaInicial.getDate());
        String fechaFinal = Utilidades.formatoFechaSinHora(txtFechaFinal.getDate());
        ReciboPdf.generar(nombreParqueadero, direccionParqueadero, txtPlaca.getText(), fechaInicial, fechaFinal, valorPagar, "NO_APLICA", "NO_APLICA");

        //Leer pdf
        try {
            File path = new File("Recibo.pdf");
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnReciboActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        String placa = txtPlacaBuscar.getText().trim().toUpperCase();

        if (placa.equals("-")) {
            Utilidades.mensajeAdvertencia("Debe digitar la placa", "Atención");
            txtPlacaBuscar.requestFocus();
            return;
        }
        buscarPagosMensualesPorPlaca(placa);


    }//GEN-LAST:event_btnBuscarActionPerformed

    private void buscarPagosMensualesPorPlaca(String placa) {
        List<PagosMensuales> result = logica.getPagosMensualesPorPlaca(placa);
        inicializarTabla();
        DefaultTableModel model = (DefaultTableModel) tblDatos.getModel();

        Object rowData[] = new Object[7];//No columnas
        for (int i = 0; i < result.size(); i++) {
            rowData[0] = result.get(i).getId();
            rowData[1] = result.get(i).getPlaca().getPlaca();
            rowData[2] = result.get(i).getPlaca().getTipo();
            rowData[3] = result.get(i).getPlaca().getPropietario();
            rowData[4] = Utilidades.formatoFechaSinHora(result.get(i).getFechaInicio());
            rowData[5] = Utilidades.formatoFechaSinHora(result.get(i).getFechaFin());
            rowData[6] = result.get(i).getValorPagar();
            model.addRow(rowData);
        }
    }

    private void cboTipoVehiculoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTipoVehiculoItemStateChanged
        if (!cboTipoVehiculo.isEnabled() || !this.pnlCentro.isVisible()) {
            return;
        }
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            //Do any operations you need to do when an item is selected.
            //aplicarTarifa();
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            //Do any operations you need to do when an item is de-selected.
            //Do any operations you need to do when an item is selected.
        }

    }//GEN-LAST:event_cboTipoVehiculoItemStateChanged

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed
        String placa = txtPlaca.getText();
        if (txtPlaca.getText().trim().equals("-")) {
            Utilidades.mensajeAdvertencia("Falta llenar la placa", "Atención");
            txtPlaca.requestFocus();
            return;
        }
        String tipoVehiculo = cboTipoVehiculo.getSelectedItem().toString();

        if (tipoVehiculo.equals(SELECCIONE)) {
            mensajeAdvertencia("Falta seleccionar el tipo de vehículo", "Atención");
            cboTipoVehiculo.requestFocus();
            return;
        }

        tipoVehiculo = tipoVehiculo.substring(0, 1);

        String propietario = Utilidades.capitalize(txtPropietario.getText());

        Date fechaInicial = txtFechaInicial.getDate();
        if (fechaInicial == null) {
            mensajeAdvertencia("Entre una fecha de inicio", "Atención");
            txtFechaInicial.requestFocus();
            return;
        }

        Date fechaFinal = txtFechaFinal.getDate();
        if (fechaFinal == null) {
            mensajeAdvertencia("Entre una fecha final", "Atención");
            txtFechaFinal.requestFocus();
            return;
        }

        if (!(Utilidades.fechaEsPosterior(fechaFinal, fechaInicial))) {
            mensajeAdvertencia("La fecha fin debe ser posterior a la fecha inicial", "Atención");
            txtFechaFinal.requestFocus();
            return;
        }

        int valorPagar = 0;
        if (!txtValorPagar.getText().trim().equals("")) {
            valorPagar = Integer.parseInt(txtValorPagar.getText());
        }

        int descuento = 0;
        if (!txtDescuento.getText().trim().equals("")) {
            descuento = Integer.parseInt(txtDescuento.getText());
        }

        String observacion = txtObservacion.getText();

        int empleadoId;
        if (Utilidades.empleadoSesion == null) {
            empleadoId = 1;
        } else {
            empleadoId = Utilidades.empleadoSesion.getId();
        }

        try {
            if (btnGrabar.getText().equals("Agregar")) {
                int id = logica.agregarPagoMensual(placa, tipoVehiculo, propietario, fechaInicial, fechaFinal, descuento, valorPagar, observacion, empleadoId);
                Utilidades.mensajeExito("Pago mensual grabado con éxito con el id: " + id, "Atención");
            } else {
                logica.editarPagoMensual(1, placa, tipoVehiculo, propietario, fechaInicial, fechaFinal, descuento, valorPagar, observacion, empleadoId);
                Utilidades.mensajeExito("Pago mensual editado con éxito", "Atención");
            }

        } catch (Exception ex) {
            Utilidades.mensajeError("Error al grabar Pago Mensual. \n" + ex.getMessage(), "Atención");
            Logger.getLogger(GUIPagoMensual.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        estadoControlesInicial();
        limpiarCajas();
        txtId.setText("");


    }//GEN-LAST:event_btnGrabarActionPerformed


    private void txtEfectivoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEfectivoKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             aplicarCambio();
        }
    }//GEN-LAST:event_txtEfectivoKeyPressed

    private void btnEfectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEfectivoActionPerformed
        aplicarCambio();
    }//GEN-LAST:event_btnEfectivoActionPerformed

    private void aplicarCambio() {
        if (txtValorPagar.getText().trim().equals("")) {
            txtValorPagar.setText("0");
        }

        long valorPagar = Long.parseLong(this.txtValorPagar.getText());

        if (txtDescuento.getText().trim().equals("")) {
            txtDescuento.setText("0");
        }
        long descuento = Long.parseLong(this.txtDescuento.getText());
        /*
        if (descuento > valorPagar) {
            mensajeAdvertencia("El descuento no puede ser mayor que el valor a pagar", "Atención");
            txtDescuento.setText("0");
            txtDescuento.requestFocus();
            return;
        }
         */
        long valorPagarDespuesDescuento = valorPagar - descuento;
        this.txtValorPagar.setText("" + valorPagarDespuesDescuento);

        //Calcular cambio
        if (txtEfectivo.getText().equals("")) {
            txtCambio.setText("0");
            txtEfectivo.setText("0");
        }
        if (txtEfectivo.getText().equals("0")) {
            return;
        }
        long efectivo = Long.parseLong(txtEfectivo.getText());
        long cambio = efectivo - valorPagarDespuesDescuento;
        if (cambio < 0) {
            mensajeAdvertencia("El efectivo debe ser mayor o igual que el valor a pagar", "Atención");
            return;
        }
        txtCambio.setText("" + cambio);

    }

    private void cboTipoVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipoVehiculoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboTipoVehiculoActionPerformed

    private void txtPlacaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlacaFocusLost

        txtPlaca.setText(txtPlaca.getText().toUpperCase());
    }//GEN-LAST:event_txtPlacaFocusLost

    private void txtValorPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorPagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorPagarActionPerformed

    private void txtPlacaBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPlacaBuscarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnBuscar.requestFocus();
            btnBuscarActionPerformed(null);
        }
    }//GEN-LAST:event_txtPlacaBuscarKeyPressed

    private void btnDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescuentoActionPerformed

    }//GEN-LAST:event_btnDescuentoActionPerformed

    private void txtDescuentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //calcularValorPagarSalidaHoras();
        }
    }//GEN-LAST:event_txtDescuentoKeyPressed

    private void btnMostrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodosActionPerformed
        buscarPagosMensuales();
    }//GEN-LAST:event_btnMostrarTodosActionPerformed

    private void txtIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdFocusLost
        String id = txtId.getText().trim();
        if (id.equals("")) {
            limpiarCajas();
            return;
        }
        limpiarCajas();
        PagosMensuales pm = logica.getPagoMensual(id);
        if (pm == null) {
            // AGREGAR

            EstadoControlesAgregar();
        } else {
            // EDITAR
            EstadoControlesEditar();

            // Cargar datos
            txtPlaca.setText(pm.getPlaca().getPlaca());
            cboTipoVehiculo.setSelectedItem(TIPOS_VEHICULO.get(pm.getPlaca().getTipo()));
            txtPropietario.setText(pm.getPlaca().getPropietario());
            txtFechaInicial.setDate(pm.getFechaInicio());
            txtFechaFinal.setDate(pm.getFechaFin());
            txtDescuento.setText("" + pm.getDescuento());
            txtValorPagar.setText("" + pm.getValorPagar());
            txtObservacion.setText("");
        }

    }//GEN-LAST:event_txtIdFocusLost
    /**
     * *
     * Busca todos los pagos mensuales
     */
    private void buscarPagosMensuales() {
        List<PagosMensuales> result = logica.getPagosMensuales();
        inicializarTabla();
        DefaultTableModel model = (DefaultTableModel) tblDatos.getModel();

        Object rowData[] = new Object[7];//No columnas
        for (int i = 0; i < result.size(); i++) {
            rowData[0] = result.get(i).getId();
            rowData[1] = result.get(i).getPlaca().getPlaca();
            rowData[2] = result.get(i).getPlaca().getTipo();
            rowData[3] = result.get(i).getPlaca().getPropietario();
            rowData[4] = Utilidades.formatoFechaSinHora(result.get(i).getFechaInicio());
            rowData[5] = Utilidades.formatoFechaSinHora(result.get(i).getFechaFin());
            rowData[6] = result.get(i).getValorPagar();
            model.addRow(rowData);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnDescuento;
    private javax.swing.JButton btnEfectivo;
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnMostrarTodos;
    private javax.swing.JButton btnRecibo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cboTipoVehiculo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCambio;
    private javax.swing.JLabel lblDescuento;
    private javax.swing.JLabel lblEfectivo;
    private javax.swing.JLabel lblFechaSalida;
    private javax.swing.JLabel lblObservacion;
    private javax.swing.JLabel lblPlaca;
    private javax.swing.JLabel lblPropietario;
    private javax.swing.JLabel lblTipoVehiculo;
    private javax.swing.JLabel lblValorPagar;
    private javax.swing.JPanel pnlAgregar;
    private javax.swing.JPanel pnlBuscar;
    private javax.swing.JPanel pnlCentro;
    private javax.swing.JPanel pnlConsultar;
    private javax.swing.JPanel pnlSur;
    private javax.swing.JPanel pnlTabla;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField txtCambio;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtEfectivo;
    private com.toedter.calendar.JDateChooser txtFechaFinal;
    private com.toedter.calendar.JDateChooser txtFechaInicial;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtObservacion;
    private javax.swing.JFormattedTextField txtPlaca;
    private javax.swing.JFormattedTextField txtPlacaBuscar;
    private javax.swing.JTextField txtPropietario;
    private javax.swing.JTextField txtValorPagar;
    // End of variables declaration//GEN-END:variables
}
